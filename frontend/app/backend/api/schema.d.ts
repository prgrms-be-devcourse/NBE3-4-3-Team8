/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/reviews/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 리뷰 수정 */
        put: operations["updateReview"];
        post?: never;
        /** 리뷰 삭제 */
        delete: operations["deleteReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/question/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자의 특정 qna 질문 조회 */
        get: operations["getQuestion"];
        /** 사용자의 특정 qna 질문 수정 */
        put: operations["putQuestion"];
        post?: never;
        /** 사용자의 특정 qna 질문 삭제 */
        delete: operations["deleteQuestion"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/deliveryInformation/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 배송 정보 갱신 (한개) */
        put: operations["putDeliveryInformation"];
        post?: never;
        /** 배송 정보 삭제 (한개) */
        delete: operations["deleteDeliveryInformation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 장바구니 조회 */
        get: operations["getCart"];
        /** 장바구니 수정 json */
        put: operations["updateCartItems"];
        /** 장바구니 추가 */
        post: operations["addCart"];
        /** 장바구니 삭제 */
        delete: operations["deleteBook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자 정보 조회 */
        get: operations["getMyPage"];
        /** 사용자 정보 갱신 */
        put: operations["putMyPage"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/dashboard/questions/{questionId}/answers/{answerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자가 작성한 QnA 질문의 상세 답변 조회 (관리자 전용) */
        get: operations["getAnswer"];
        /** 질문에 대한 답변 수정 (관리자 전용) */
        put: operations["modifyAnswer"];
        post?: never;
        /** 질문에 대한 답변 삭제 (관리자 전용) */
        delete: operations["deleteAnswer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews/{book-id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 리뷰 등록 */
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/question": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자가 작성한 QnA 질문 목록 조회 (페이지네이션 & 커서 페이징 지원) */
        get: operations["getQuestions"];
        put?: never;
        /** 사용자가 qna 질문 등록 */
        post: operations["postQuestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/question/genFile/{questionId}/{typeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 등록 */
        post: operations["makeNewFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrdersByMember"];
        put?: never;
        post: operations["createOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/deliveryInformation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 배송 정보 등록(최대 5개) */
        post: operations["postDeliveryInformation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cart/anonymous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getAnonymousCart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["confirmPayment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["refreshAccessToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["adminLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/dashboard/questions/{questionId}/answers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자가 작성한 QnA 질문에 대한 답변 조회 */
        get: operations["getAnswers"];
        put?: never;
        /** 질문에 답변 등록 (관리자 전용) */
        post: operations["postAnswer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/detail-orders/{detailOrderId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * 상세 주문 배송 상태 수정
         * @description 상세 주문 ID를 이용해 배송 상태를 변경합니다.
         */
        patch: operations["updateDetailStatus"];
        trace?: never;
    };
    "/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 리뷰 조회 */
        get: operations["getAllReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reviews/{bookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 도서 리뷰 조회 */
        get: operations["getReviewsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/success": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tossPaymentSuccess"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["tossPaymentFail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/question/genFile/download/{questionId}/{fileNo}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 이미지 전송 */
        get: operations["loadImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/orders/{orderId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getDetailOrdersByOrderIdAndMember"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/orders/payment-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPaymentInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/event/banners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBannerImages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 도서 조회 */
        get: operations["getAllBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/{bookId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 도서 조회 */
        get: operations["getBookById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/books/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 도서 검색 (제목, 저자, ISBN13, 출판사 검색) */
        get: operations["searchBooks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me/my/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 사용자 리뷰 조회 */
        get: operations["getMemberReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 회원 주문 조회 */
        get: operations["getAllOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/orders/{orderId}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 상세 주문 조회
         * @description 상세 주문 ID를 이용해 정보를 조회합니다.
         */
        get: operations["getOrderDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/dashboard/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminQuestions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/dashboard/questions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAdminQuestion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/my/question/genFile/{questionId}/{fileNo}/{typeCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 삭제 */
        delete: operations["deleteImageFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/dashboard/questions/{questionid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteQuestion_1"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ReqQuestionDto: {
            title: string;
            content: string;
            cleanTitle?: string;
            cleanContent?: string;
        };
        ReqDeliveryInformationDto: {
            isDefaultAddress?: boolean;
            /** Format: int64 */
            id?: number;
            addressName?: string;
            postCode?: string;
            detailAddress?: string;
            recipient?: string;
            phone?: string;
            defaultAddress?: boolean;
        };
        DeliveryInformationDto: {
            /** Format: int64 */
            id?: number;
            addressName?: string;
            postCode?: string;
            detailAddress?: string;
            recipient?: string;
            phone?: string;
            isDefaultAddress?: boolean;
        };
        ResMemberMyPageDto: {
            name?: string;
            phoneNumber?: string;
            deliveryInformationDtos?: components["schemas"]["DeliveryInformationDto"][];
        };
        CartItemRequestDto: {
            /** Format: int64 */
            bookId: number;
            /** Format: int32 */
            quantity?: number;
            isAddToCart?: boolean;
            addToCart?: boolean;
        };
        CartRequestDto: {
            cartItems: components["schemas"]["CartItemRequestDto"][];
        };
        PutReqMemberMyPageDto: {
            name?: string;
            phoneNumber?: string;
            profileImageUrl?: string;
        };
        ReqAnswerDto: {
            content?: string;
        };
        ReviewRequestDto: {
            content?: string;
            /** Format: double */
            rating?: number;
        };
        AnswerDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            content?: string;
        };
        QuestionDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            title?: string;
            content?: string;
            answers?: components["schemas"]["AnswerDto"][];
            genFiles?: components["schemas"]["QuestionGenFileDto"][];
            answer?: boolean;
        };
        QuestionGenFileDto: {
            /** Format: int64 */
            id?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
            /** Format: int64 */
            postId?: number;
            fileName?: string;
            typeCode?: string;
            fileExtTypeCode?: string;
            fileExtType2Code?: string;
            /** Format: int64 */
            fileSize?: number;
            /** Format: int64 */
            fileNo?: number;
            fileExt?: string;
            fileDateDir?: string;
            originalFileName?: string;
        };
        OrderRequestDto: {
            postCode?: string;
            fullAddress?: string;
            recipient?: string;
            phone?: string;
            paymentMethod?: string;
            /** Format: int64 */
            bookId?: number;
            /** Format: int32 */
            quantity?: number;
            /** @enum {string} */
            orderType?: "CART" | "DIRECT";
            tossOrderId?: string;
            cartOrder?: boolean;
            directOrder?: boolean;
        };
        CartResponseDto: {
            /** Format: int64 */
            bookId?: number;
            /** Format: int32 */
            quantity?: number;
            title?: string;
            /** Format: int32 */
            price?: number;
            coverImage?: string;
        };
        PaymentConfirmRequest: {
            paymentKey?: string;
            orderId?: string;
            /** Format: int64 */
            amount?: number;
        };
        AdminLoginDto: {
            username?: string;
            password?: string;
        };
        UpdateDetailOrderStatusRequest: {
            /**
             * @description 변경할 배송 상태
             * @enum {string}
             */
            status?: "PENDING" | "SHIPPING" | "DELIVERED" | "RETURNED";
        };
        AdminDetailOrderDTO: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            orderId?: number;
            /** Format: date-time */
            modifyDate?: string;
            bookTitle?: string;
            /** Format: int32 */
            bookQuantity?: number;
            deliveryStatus?: string;
        };
        PageReviewResponseDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["ReviewResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            paged?: boolean;
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            unpaged?: boolean;
        };
        ReviewResponseDto: {
            /** Format: int64 */
            bookId?: number;
            /** Format: int64 */
            reviewId?: number;
            /** Format: int64 */
            memberId?: number;
            content?: string;
            /** Format: double */
            rating?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
        };
        SortObject: {
            empty?: boolean;
            unsorted?: boolean;
            sorted?: boolean;
        };
        Pageable: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            size?: number;
            sort?: string[];
        };
        OrderDTO: {
            /** Format: int64 */
            orderId?: number;
            orderStatus?: string;
            /** Format: int64 */
            totalPrice?: number;
            /** Format: date-time */
            createDate?: string;
            coverImage?: string;
            title?: string;
            /** Format: int64 */
            id?: number;
        };
        PageOrderDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["OrderDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        DetailOrderDto: {
            /** Format: int64 */
            orderId?: number;
            bookTitle?: string;
            /** Format: int32 */
            bookQuantity?: number;
            /** Format: double */
            totalPrice?: number;
            deliveryStatus?: string;
            coverImage?: string;
            recipient?: string;
            phone?: string;
            fullAddress?: string;
        };
        PaymentResponseDto: {
            cartList?: components["schemas"]["CartResponseDto"][];
            /** Format: int64 */
            priceStandard?: number;
            /** Format: int64 */
            pricesSales?: number;
            orderId?: string;
        };
        BookResponseDto: {
            /** Format: int64 */
            id?: number;
            title?: string;
            author?: string;
            isbn?: string;
            isbn13?: string;
            publisher?: string;
            /** Format: date */
            pubDate?: string;
            /** Format: int32 */
            priceStandard?: number;
            /** Format: int32 */
            priceSales?: number;
            /** Format: int64 */
            salesPoint?: number;
            /** Format: int32 */
            stock?: number;
            /** Format: int32 */
            status?: number;
            /** Format: double */
            rating?: number;
            toc?: string;
            /** Format: int64 */
            reviewCount?: number;
            coverImage?: string;
            /** Format: int32 */
            categoryId?: number;
            description?: string;
            descriptionImage?: string;
            /** Format: double */
            averageRating?: number;
        };
        PageBookResponseDto: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["BookResponseDto"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageDtoReviewsResponseDto: {
            /** Format: int32 */
            currentPageNumber: number;
            /** Format: int32 */
            pageSize: number;
            /** Format: int64 */
            totalPages: number;
            /** Format: int64 */
            totalItems: number;
            items: components["schemas"]["ReviewsResponseDto"][];
        };
        ReviewsResponseDto: {
            /** Format: int64 */
            bookId?: number;
            bookTitle?: string;
            bookContent?: string;
            /** Format: int64 */
            reviewId?: number;
            /** Format: double */
            rating?: number;
            /** Format: date-time */
            createDate?: string;
            /** Format: date-time */
            modifyDate?: string;
        };
        AdminOrderDTO: {
            /** Format: int64 */
            orderId?: number;
            /** Format: date-time */
            createdDate?: string;
            /** Format: int64 */
            totalPrice?: number;
            status?: string;
            detailOrders?: components["schemas"]["AdminDetailOrderDTO"][];
        };
        PageAdminOrderDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["AdminOrderDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        PageAdminDetailOrderDTO: {
            /** Format: int32 */
            totalPages?: number;
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["AdminDetailOrderDTO"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            pageable?: components["schemas"]["PageableObject"];
            /** Format: int32 */
            numberOfElements?: number;
            first?: boolean;
            last?: boolean;
            empty?: boolean;
        };
        AdminQuestionDto: {
            /** Format: int64 */
            id?: number;
            title?: string;
            content?: string;
            memberEmail?: string;
            createDate?: string;
            hasAnswer?: boolean;
            answer?: components["schemas"]["AnswerDto"];
        };
        PageDtoAdminQuestionDto: {
            /** Format: int32 */
            currentPageNumber: number;
            /** Format: int32 */
            pageSize: number;
            /** Format: int64 */
            totalPages: number;
            /** Format: int64 */
            totalItems: number;
            items: components["schemas"]["AdminQuestionDto"][];
        };
        GetResAnswersDto: {
            answers?: components["schemas"]["AnswerDto"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateReview: {
        parameters: {
            query: {
                content: string;
                rating: number;
            };
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    deleteReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    getQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["QuestionDto"];
                };
            };
        };
    };
    putQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReqQuestionDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    putDeliveryInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReqDeliveryInformationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResMemberMyPageDto"];
                };
            };
        };
    };
    deleteDeliveryInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResMemberMyPageDto"];
                };
            };
        };
    };
    getCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CartResponseDto"][];
                };
            };
        };
    };
    updateCartItems: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteBook: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMyPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResMemberMyPageDto"];
                };
            };
        };
    };
    putMyPage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PutReqMemberMyPageDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResMemberMyPageDto"];
                };
            };
        };
    };
    getAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
                answerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["AnswerDto"];
                };
            };
        };
    };
    modifyAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
                answerId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReqAnswerDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
                answerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                "book-id": number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getQuestions: {
        parameters: {
            query?: {
                page?: number;
                before?: string;
                after?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    postQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReqQuestionDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["QuestionDto"];
                };
            };
        };
    };
    makeNewFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
                typeCode: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": string;
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getOrdersByMember: {
        parameters: {
            query: {
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageOrderDTO"];
                };
            };
        };
    };
    createOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrderRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    postDeliveryInformation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReqDeliveryInformationDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["ResMemberMyPageDto"];
                };
            };
        };
    };
    getAnonymousCart: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CartRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["CartResponseDto"][];
                };
            };
        };
    };
    confirmPayment: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PaymentConfirmRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    refreshAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: {
                refreshToken?: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    adminLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminLoginDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    getAnswers: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["GetResAnswersDto"];
                };
            };
        };
    };
    postAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReqAnswerDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    updateDetailStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                detailOrderId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDetailOrderStatusRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["AdminDetailOrderDTO"];
                };
            };
        };
    };
    getAllReviews: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                reviewSortType?: "CREATE_AT_DESC" | "CREATE_AT_ASC" | "RATING_DESC" | "RATING_ASC";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageReviewResponseDto"];
                };
            };
        };
    };
    getReviewsById: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                reviewSortType?: "CREATE_AT_DESC" | "CREATE_AT_ASC" | "RATING_DESC" | "RATING_ASC";
            };
            header?: never;
            path: {
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageReviewResponseDto"];
                };
            };
        };
    };
    tossPaymentSuccess: {
        parameters: {
            query: {
                paymentKey: string;
                orderId: string;
                amount: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    tossPaymentFail: {
        parameters: {
            query: {
                code: string;
                message: string;
                orderId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    loadImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
                fileNo: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string;
                };
            };
        };
    };
    getDetailOrdersByOrderIdAndMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["DetailOrderDto"][];
                };
            };
        };
    };
    getPaymentInfo: {
        parameters: {
            query: {
                orderType: "CART" | "DIRECT";
                bookId?: number;
                quantity?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PaymentResponseDto"];
                };
            };
        };
    };
    getBannerImages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": string[];
                };
            };
        };
    };
    getAllBooks: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                bookSortType?: "PUBLISHED_DATE" | "SALES_POINT" | "RATING" | "REVIEW_COUNT";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageBookResponseDto"];
                };
            };
        };
    };
    getBookById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bookId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["BookResponseDto"];
                };
            };
        };
    };
    searchBooks: {
        parameters: {
            query: {
                page?: number;
                pageSize?: number;
                bookSortType?: "PUBLISHED_DATE" | "SALES_POINT" | "RATING" | "REVIEW_COUNT";
                searchType?: "TITLE" | "AUTHOR" | "ISBN13" | "PUBLISHER";
                keyword: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageBookResponseDto"];
                };
            };
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    getMemberReviews: {
        parameters: {
            query?: {
                page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageDtoReviewsResponseDto"];
                };
            };
        };
    };
    getAllOrders: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
                sortType?: "ORDER_DATE" | "TOTAL_PRICE" | "STATUS";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageAdminOrderDTO"];
                };
            };
        };
    };
    getOrderDetails: {
        parameters: {
            query?: {
                page?: number;
                size?: number;
                sort?: string;
            };
            header?: never;
            path: {
                orderId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageAdminDetailOrderDTO"];
                };
            };
        };
    };
    getAdminQuestions: {
        parameters: {
            query: {
                keyword?: string;
                hasAnswer?: boolean;
                pageable: components["schemas"]["Pageable"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["PageDtoAdminQuestionDto"];
                };
            };
        };
    };
    getAdminQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": Record<string, never>;
                };
            };
        };
    };
    deleteImageFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionId: number;
                fileNo: number;
                typeCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteQuestion_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                questionid: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
